// Generated by CoffeeScript 1.7.1
(function() {
  var Promise, executeTask, humanizeTime, isPromise, isStream, streamToPromise, tag, _gulp, _task, _tasks;

  Promise = require('bluebird');

  require('colors');

  _tasks = {};

  _gulp = null;

  isPromise = function(input) {
    return input && typeof input.then === 'function';
  };

  isStream = function(input) {
    return input && typeof input.pipe === 'function';
  };

  humanizeTime = function(timeArray) {
    var f, limit, m, ndx, numDecimals, s, suffix, time;
    f = function(n) {
      return Math.floor(n) % 1000;
    };
    s = timeArray[0], m = timeArray[1];
    suffix = [' s', ' ms', ' Î¼s', ' ns'];
    time = s + (m / 1000000000);
    limit = 1;
    ndx = 0;
    while (time < limit) {
      time *= 1000;
      ndx++;
    }
    numDecimals = Math.max(0, 4 - (parseInt(time) + '').length);
    return time.toFixed(numDecimals) + suffix[ndx];
  };

  streamToPromise = function(stream) {
    return new Promise(function(resolve, reject) {
      var success, _i, _len, _ref, _results;
      stream.on('error', reject);
      _ref = ['drain', 'finish', 'end', 'close'];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        success = _ref[_i];
        _results.push(stream.on(success, resolve));
      }
      return _results;
    });
  };

  _task = function(name, cb) {
    _tasks[name] = cb;
    if (_gulp != null) {
      return _gulp.task(name, function() {
        return _task.run(name);
      });
    }
  };

  executeTask = function(task) {
    var promise, returnVal;
    returnVal = task.apply(null);
    if (isPromise(returnVal)) {
      promise = returnVal;
    } else if (isStream(returnVal)) {
      promise = streamToPromise(returnVal);
    } else {
      promise = Promise.resolve(returnVal);
    }
    return promise;
  };

  tag = "[" + "task".yellow + "]";

  _task.run = function(name) {
    var startTime, task;
    if (typeof name === "string") {
      task = _tasks[name];
      if (task == null) {
        throw new Error("Task Not Found: '" + name + "'");
      }
    } else if (typeof name === "function") {
      task = name;
      name = null;
    } else {
      throw new Error('task.run expects either the name of a task registered with task or an anonymous function');
    }
    startTime = process.hrtime();
    if (name) {
      console.log("" + tag + " Running '" + name.green.bold + "'");
    }
    return executeTask(task).tap(function() {
      var timeDiff, timeTaken;
      if (name) {
        timeDiff = process.hrtime(startTime);
        timeTaken = humanizeTime(timeDiff);
        return console.log(("" + tag + " Finished '" + name.magenta.bold + "' in ") + timeTaken.green.bold);
      }
    })["catch"](function(error) {
      if (name) {
        if (error.reported) {
          console.log(("" + tag + " ") + "Failed to complete '".red + name.red.bold + "'".red);
        } else {
          console.log(("" + tag + " ") + "Failed to complete '".red + name.red.bold + ("': " + error.message).red);
          console.log(error.stack);
          error.reported = true;
        }
      }
      return Promise.reject(error);
    });
  };

  _task.configure = function(gulp) {
    var name, task, _results;
    _gulp = gulp;
    if (gulp) {
      _results = [];
      for (name in _tasks) {
        task = _tasks[name];
        _results.push(_gulp.task(name, function() {
          return _task.run(name);
        }));
      }
      return _results;
    }
  };

  module.exports = _task;

}).call(this);
